{"version":3,"sources":["components/input.tsx","components/buttonSubstring.tsx","components/checkbox.tsx","components/buttonLength.tsx","API/api.ts","store/reducer.ts","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["Input","type","placeholder","ButtonSubstring","Checkbox","onChange","ButtonLength","api","axios","get","initialState","data","valueInput","valueCheckbox","filterData","error","App","dispatch","useDispatch","useEffect","then","res","console","log","catch","err","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","state","action","store","createStore","applyMiddleware","thunkMiddleWare","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAKaA,EAAQ,WAQjB,OACI,8BACI,uBAAOC,KAAK,OAAOC,YAAY,cCZ9BC,EAAkB,WAC3B,OACI,8BACI,0CCHCC,EAAW,WAKpB,OACI,8BACI,uBAAOH,KAAK,WAAYI,SANT,kBCOZC,EATO,WAClB,OACI,8BACI,0C,+BCHCC,EACA,WACL,OAAOC,IAAMC,IAAI,uECDnBC,EAAe,CACjBC,KAAM,GACNC,WAAY,GACZC,eAAe,EACfC,WAAY,GACZC,MAAO,ICsBIC,MAnBf,WACI,IAAMC,EAAWC,cAQjB,OANAC,qBAAU,WACNF,GDsDuB,SAACA,GAC5B,OAAOV,IACFa,MAAK,SAACC,GACHC,QAAQC,IAAIF,EAAIV,KAAKA,MACrBM,EAzBkC,CAC1ChB,KAAM,0BAA2BU,KAwBNU,EAAIV,KAAKA,UAE/Ba,OAAM,SAACC,GACJH,QAAQC,IAAIE,WC5DlB,IAKE,sBAAKC,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCXGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,eCLRO,EAAWC,YAAgB,CAC7BzB,KHO0B,WAAkE,IAAjE0B,EAAgE,uDAAxD3B,EAAc4B,EAA0C,uCAC3F,OAAQA,EAAOrC,MACX,IAAK,0BACD,OAAO,2BACAoC,GADP,IAEI1B,KAAM2B,EAAO3B,OAGrB,IAAK,iCACD,OAAO,2BACA0B,GADP,IAEIvB,WAAYwB,EAAOxB,aAG3B,IAAK,oCACD,OAAO,2BACAuB,GADP,IAEIxB,cAAeyB,EAAOzB,gBAE9B,IAAK,2BACD,OAAO,2BACAwB,GADP,IAEItB,MAAOuB,EAAOvB,QAEtB,IAAK,iCACD,OAAO,2BACAsB,GADP,IAEIzB,WAAY0B,EAAO1B,aAG3B,QACI,OAAOyB,MGnCNE,EAAQC,YAAYL,EAAUM,YAAgBC,MAK3DC,OAAOJ,MAAQA,ECJfK,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACF,cAAC,EAAD,QAGFQ,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.1cb59ad7.chunk.js","sourcesContent":["import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {api} from \"../API/api\";\r\n\r\n\r\nexport const Input = () => {\r\n\r\n\r\n\r\n   /* const changeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValueInput(e.currentTarget.value)\r\n    }*/\r\n\r\n    return (\r\n        <div>\r\n            <input type='text' placeholder='search' />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\nexport const ButtonSubstring = () => {\r\n    return (\r\n        <div>\r\n            <button>\r\n                1\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\n\r\n\r\nexport const Checkbox = () => {\r\n    const changeCheckbox = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type='checkbox'  onChange={changeCheckbox}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n const ButtonLength = () => {\r\n    return (\r\n        <div>\r\n            <button>\r\n                2\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\nexport default ButtonLength","import axios from \"axios\";\r\n\r\nexport const api = {\r\n    getData: () => {\r\n        return axios.get('https://cors-anywhere.herokuapp.com/http://www.mrsoft.by/data.json')\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {api} from \"../API/api\";\r\n\r\nconst initialState = {\r\n    data: [] as string[],\r\n    valueInput: '' as string,\r\n    valueCheckbox: false,\r\n    filterData: [] as string[],\r\n    error: ''\r\n}\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const getDataReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"getDataReducer/GET-DATA\": {\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n        }\r\n        case \"getDataReducer/SET-FILTER-DATA\": {\r\n            return {\r\n                ...state,\r\n                filterData: action.filterData\r\n            }\r\n        }\r\n        case \"getDataReducer/SET-VALUE-CHECKBOX\":\r\n            return {\r\n                ...state,\r\n                valueCheckbox: action.valueCheckbox\r\n            }\r\n        case \"getDataReducer/SET-ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        case \"getDataReducer/SET-VALUE-INPUT\": {\r\n            return {\r\n                ...state,\r\n                valueInput: action.valueInput\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const getDataAC = (data: string[]) => ({\r\n    type: 'getDataReducer/GET-DATA', data\r\n} as const)\r\n\r\nexport const setValueInputAC = (valueInput: string) => ({\r\n    type: 'getDataReducer/SET-VALUE-INPUT', valueInput\r\n} as const)\r\n\r\nexport const setFilteredDataAC = (filterData: string[]) => ({\r\n    type: 'getDataReducer/SET-FILTER-DATA', filterData\r\n} as const)\r\n\r\nexport const setValueCheckboxAC = (valueCheckbox: boolean) => ({\r\n    type: 'getDataReducer/SET-VALUE-CHECKBOX', valueCheckbox\r\n} as const)\r\n\r\nexport const setErrorAC = (error: string) => ({\r\n    type: 'getDataReducer/SET-ERROR', error\r\n} as const)\r\n\r\n\r\nexport const getDataTC = () => (dispatch: Dispatch) => {\r\n    return api.getData()\r\n        .then((res) => {\r\n            console.log(res.data.data)\r\n            dispatch(getDataAC(res.data.data))\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n}\r\n\r\ntype getDataACType = ReturnType<typeof getDataAC>\r\ntype setValueInputACType = ReturnType<typeof setValueInputAC>\r\ntype setFilteredDataACType = ReturnType<typeof setFilteredDataAC>\r\ntype setValueCheckboxACType = ReturnType<typeof setValueCheckboxAC>\r\ntype setErrorACType = ReturnType<typeof setErrorAC>\r\n\r\nexport type ActionsType = getDataACType\r\n    | setValueInputACType\r\n    | setFilteredDataACType\r\n    | setValueCheckboxACType\r\n    | setErrorACType\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Input} from \"./components/input\";\nimport {ButtonSubstring} from \"./components/buttonSubstring\";\nimport {Checkbox} from \"./components/checkbox\";\nimport ButtonLength from \"./components/buttonLength\";\nimport {useDispatch} from \"react-redux\";\nimport {getDataTC} from \"./store/reducer\";\n\n\n\nfunction App() {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getDataTC())\n    },[])\n\n\n\n    return (\n        <div className=\"App\">\n            <Input/>\n            <Checkbox/>\n            <ButtonSubstring/>\n            <ButtonLength/>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport {getDataReducer} from \"./reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    data: getDataReducer\r\n})\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleWare));\r\n\r\nexport type RootStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}