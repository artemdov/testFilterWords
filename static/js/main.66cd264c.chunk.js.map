{"version":3,"sources":["API/api.ts","store/reducer.ts","components/input.tsx","components/buttonSubstring.tsx","components/checkbox.tsx","components/buttonLength.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["api","axios","get","initialState","data","valueInput","valueCheckbox","filterData","error","setFilterDataAC","type","Input","dispatch","useDispatch","useSelector","state","placeholder","onChange","e","setValueInputAC","currentTarget","value","ButtonSubstring","onClick","filter","i","toLowerCase","includes","Checkbox","setValueCheckboxAC","checked","ButtonLength","length","setErrorAC","map","id","App","useEffect","then","res","catch","err","console","log","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleWare","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66cd264c.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const api = {\r\n    getData: () => {\r\n        return axios.get('https://cors-anywhere.herokuapp.com/http://www.mrsoft.by/data.json')\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {api} from \"../API/api\";\r\n\r\nconst initialState = {\r\n    data: [] as string[],\r\n    valueInput: '' as string,\r\n    valueCheckbox: false,\r\n    filterData: [] as string[],\r\n    error: ''\r\n}\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const getDataReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"getDataReducer/GET-DATA\": {\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n        }\r\n        case \"getDataReducer/SET-FILTER-DATA\": {\r\n            return {\r\n                ...state,\r\n                filterData: action.filterData\r\n            }\r\n        }\r\n        case \"getDataReducer/SET-VALUE-CHECKBOX\":\r\n            return {\r\n                ...state,\r\n                valueCheckbox: action.valueCheckbox\r\n            }\r\n        case \"getDataReducer/SET-ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        case \"getDataReducer/SET-VALUE-INPUT\": {\r\n            return {\r\n                ...state,\r\n                valueInput: action.valueInput\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const getDataAC = (data: string[]) => ({\r\n    type: 'getDataReducer/GET-DATA', data\r\n} as const)\r\n\r\nexport const setValueInputAC = (valueInput: string) => ({\r\n    type: 'getDataReducer/SET-VALUE-INPUT', valueInput\r\n} as const)\r\n\r\nexport const setFilterDataAC = (filterData: string[]) => ({\r\n    type: 'getDataReducer/SET-FILTER-DATA', filterData\r\n} as const)\r\n\r\nexport const setValueCheckboxAC = (valueCheckbox: boolean) => ({\r\n    type: 'getDataReducer/SET-VALUE-CHECKBOX', valueCheckbox\r\n} as const)\r\n\r\nexport const setErrorAC = (error: string) => ({\r\n    type: 'getDataReducer/SET-ERROR', error\r\n} as const)\r\n\r\n\r\nexport const getDataTC = () => (dispatch: Dispatch) => {\r\n    return api.getData()\r\n        .then((res) => {\r\n            dispatch(getDataAC(res.data.data))\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n}\r\n\r\ntype getDataACType = ReturnType<typeof getDataAC>\r\ntype setValueInputACType = ReturnType<typeof setValueInputAC>\r\ntype setFilteredDataACType = ReturnType<typeof setFilterDataAC>\r\ntype setValueCheckboxACType = ReturnType<typeof setValueCheckboxAC>\r\ntype setErrorACType = ReturnType<typeof setErrorAC>\r\n\r\nexport type ActionsType = getDataACType\r\n    | setValueInputACType\r\n    | setFilteredDataACType\r\n    | setValueCheckboxACType\r\n    | setErrorACType\r\n","import React, {ChangeEvent} from 'react';\r\nimport {setValueInputAC} from \"../store/reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../store/store\";\r\n\r\n\r\nexport const Input = () => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const valueInput = useSelector<RootStateType, string>(state => state.data.valueInput)\r\n\r\n    const changeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setValueInputAC(e.currentTarget.value))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type='text' placeholder='search' onChange={changeInput} value={valueInput}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../store/store\";\r\nimport {setFilterDataAC} from \"../store/reducer\";\r\n\r\n\r\nexport const ButtonSubstring = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const valueCheckbox = useSelector<RootStateType, boolean>(state => state.data.valueCheckbox)\r\n    const data = useSelector<RootStateType, string[]>(state => state.data.data)\r\n    const valueInput = useSelector<RootStateType, string>(state => state.data.valueInput)\r\n\r\n    const onClickSubStringHandler =() => {\r\n        valueCheckbox\r\n            ? dispatch(setFilterDataAC(data.filter(i => i.toLowerCase().includes(valueInput.toLowerCase()))))\r\n            : dispatch(setFilterDataAC(data.filter(i => i.includes(valueInput))))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={onClickSubStringHandler}>\r\n                substring\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../store/store\";\r\nimport {setValueCheckboxAC} from \"../store/reducer\";\r\n\r\n\r\nexport const Checkbox = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const valueCheckbox = useSelector<RootStateType, boolean>(state => state.data.valueCheckbox)\r\n\r\n    const changeCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setValueCheckboxAC(e.currentTarget.checked))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type='checkbox' onChange={changeCheckbox} checked={valueCheckbox}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../store/store\";\r\nimport {setErrorAC, setFilterDataAC} from \"../store/reducer\";\r\n\r\nconst ButtonLength = () => {\r\n    debugger\r\n    const dispatch = useDispatch()\r\n    const valueInput = useSelector<RootStateType, string>(state => state.data.valueInput)\r\n    const data = useSelector<RootStateType, string[]>(state => state.data.data)\r\n    const error = useSelector<RootStateType, string>(state => state.data.error)\r\n    const filterData = useSelector<RootStateType, string[]>(state => state.data.filterData)\r\n\r\n\r\n    const onClickLengthHandler = () => {\r\n        +(valueInput) ? dispatch(setFilterDataAC(data.filter(i => i.length > +(valueInput)))) : dispatch(setErrorAC('Enter correct data'))\r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={onClickLengthHandler}>\r\n                length\r\n            </button>\r\n\r\n            {filterData.length > 0 && filterData.map((i, id) => {\r\n                return <div key={id}>{i}</div>\r\n            })}\r\n            {error}\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default ButtonLength","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Input} from \"./components/input\";\nimport {ButtonSubstring} from \"./components/buttonSubstring\";\nimport {Checkbox} from \"./components/checkbox\";\nimport ButtonLength from \"./components/buttonLength\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getDataTC} from \"./store/reducer\";\nimport {RootStateType} from \"./store/store\";\n\n\n\nfunction App() {\n\n    const dispatch = useDispatch()\n    const valueCheckbox = useSelector<RootStateType, boolean>(state => state.data.valueCheckbox)\n\n\n    useEffect(() => {\n        dispatch(getDataTC())\n    },[dispatch])\n\n\n\n    return (\n        <div className=\"App\">\n            <Input/>\n            <Checkbox/>\n            <ButtonSubstring/>\n            <ButtonLength/>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport {getDataReducer} from \"./reducer\";\r\n\r\nconst reducers = combineReducers({\r\n    data: getDataReducer\r\n})\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleWare));\r\n\r\nexport type RootStateType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}